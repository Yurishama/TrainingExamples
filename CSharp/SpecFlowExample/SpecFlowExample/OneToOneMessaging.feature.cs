// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowExample
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Simple Messaging")]
    public partial class SimpleMessagingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "OneToOneMessaging.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Simple Messaging", "\tIn order to communicate privately\r\n\tAs a chat user\r\n\tI want to be able to send a" +
                    " direct message to one of my friends", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Simple message exchange")]
        public virtual void SimpleMessageExchange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple message exchange", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 testRunner.Given("a user Johnny", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
    testRunner.And("a user Benjamin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
    testRunner.And("that he is a friend of Johnny", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "From",
                        "To",
                        "Text"});
            table1.AddRow(new string[] {
                        "Johnny",
                        "Benjamin",
                        "Hello!"});
            table1.AddRow(new string[] {
                        "Benjamin",
                        "Johnny",
                        "Hi!"});
            table1.AddRow(new string[] {
                        "Johnny",
                        "Benjamin",
                        "What\'s up?"});
            table1.AddRow(new string[] {
                        "Benjamin",
                        "Johnny",
                        "Nothing."});
#line 10
 testRunner.When("They send the following messages in order:", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "From",
                        "Text"});
            table2.AddRow(new string[] {
                        "Me",
                        "Hello!"});
            table2.AddRow(new string[] {
                        "Benjamin",
                        "Hi!"});
            table2.AddRow(new string[] {
                        "Me",
                        "What\'s up?"});
            table2.AddRow(new string[] {
                        "Benjamin",
                        "Nothing."});
#line 16
 testRunner.Then("Johnny should see:", ((string)(null)), table2, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "From",
                        "Text"});
            table3.AddRow(new string[] {
                        "Johnny",
                        "Hello!"});
            table3.AddRow(new string[] {
                        "Me",
                        "Hi!"});
            table3.AddRow(new string[] {
                        "Johnny",
                        "What\'s up?"});
            table3.AddRow(new string[] {
                        "Me",
                        "Nothing."});
#line 22
 testRunner.And("Benjamin should see:", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Trying to message somebody who is not a friend")]
        public virtual void TryingToMessageSomebodyWhoIsNotAFriend()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trying to message somebody who is not a friend", null, ((string[])(null)));
#line 29
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 30
 testRunner.Given("a user Johnny", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
    testRunner.And("a user Benjamin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
    testRunner.And("that he is not a friend of Johnny", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.When("Johnny sends a message \"Hey!\" to Benjamin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "From",
                        "Text"});
            table4.AddRow(new string[] {
                        "Me",
                        "Hey!"});
            table4.AddRow(new string[] {
                        "Benjamin",
                        "Automatic message:"});
            table4.AddRow(new string[] {
                        "",
                        "You are not my friend."});
            table4.AddRow(new string[] {
                        "",
                        "Either join my friends or get lost."});
#line 34
 testRunner.Then("Johnny should see:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
